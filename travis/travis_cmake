#!/usr/bin/env bash
#
# Copyright (c) 2012-2019 DreamWorks Animation LLC
#
# All rights reserved. This software is distributed under the
# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
#
# Redistributions of source code must retain the above copyright
# and license notice and the following restrictions and disclaimer.
#
# *     Neither the name of DreamWorks Animation nor the names of
# its contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
#
#
# Travis build script

set -e

declare -A PARMS

# Specify defaults from env

PARMS[--houdini]=$HOUDINI_MAJOR
PARMS[--build_type]=$BUILD_TYPE
PARMS[--abi]=$ABI
PARMS[--compiler]=$COMPILER
PARMS[--blosc]=$BLOSC
PARMS[--core]=yes
PARMS[--houdini_dir]=hou
PARMS[--prefix]="/tmp/OpenVDB"
PARMS[--targets]=all
PARMS[-j]=4

OPTIONAL_SHORT_ARGS+=("j:")  ## Thread usage
OPTIONAL_SHORT_ARGS+=("u")   ## Builds the unit tests

OPTIONAL_LONG_ARGS+=("abi:")         ## VDB ABI to use
OPTIONAL_LONG_ARGS+=("core")
OPTIONAL_LONG_ARGS+=("targets:")     ## Specify make targets (comma separated)
OPTIONAL_LONG_ARGS+=("houdini:")     ## Houdini version to use
OPTIONAL_LONG_ARGS+=("houdini_dir:") ## Directory of houdini installation
OPTIONAL_LONG_ARGS+=("prefix:")      ## Location for root install folder
OPTIONAL_LONG_ARGS+=("build_type:")  ## Debug build
OPTIONAL_LONG_ARGS+=("blosc:")       ## Use blosc
OPTIONAL_LONG_ARGS+=("compiler:")    ## Compiler to use
OPTIONAL_LONG_ARGS+=("verbose")      ## Verbose make output

############################################################################
############################################################################

HAS_PARM() {
    if [ -z ${PARMS[$1]} ]; then return 1
    else return 0; fi
}

# Format to string and replace spaces with commas

LONG_ARGS_STR="${OPTIONAL_LONG_ARGS[@]}"
LONG_ARGS_STR=${LONG_ARGS_STR// /,}
SHORT_ARGS_STR="${OPTIONAL_SHORT_ARGS[@]}"
SHORT_ARGS_STR=${SHORT_ARGS_STR// /,}

# Parse all arguments. Error if unsupported

ARGS=($(eval getopt -u --options=$SHORT_ARGS_STR --longoptions=$LONG_ARGS_STR -- $@))

# Parse all user supplied command line arguments into an assosiate array

NUM_ARGS=${#ARGS[@]}
USED_ARGS=0
for ARG in "${ARGS[@]}"; do
    USED_ARGS=$((USED_ARGS+1))
    if [[ $ARG == "--" ]]; then break; fi
    if [[ $ARG == "--"* ]] || [[ $ARG == "-"* ]]; then
        PARMS[$ARG]=$ARG
        prev=$ARG
    elif [ ! -z $prev ]; then
        PARMS[$prev]=$ARG
        prev=""
    fi
done

if [ $USED_ARGS -ne $NUM_ARGS ]; then
    for ARG in $(seq $USED_ARGS $NUM_ARGS); do
        IGNORED+=${ARGS[$ARG]}
    done
    echo "Warning: The following arguments were ignored -- "$IGNORED
fi

#### Export some manual library locations
#### @note These locations will be empty if they're disabled (see travis.setup)
#### All other library locations are handled by USE_SYSTEM_LIBRARY_PATHS

declare -A CMAKE_DICT

HOUDINI=${PARMS[--houdini]}
USE_BLOSC=${PARMS[--blosc]}
CORE=${PARMS[--core]}

# export CPPUNIT_ROOT=$HOME/cppunit
# export BLOSC_ROOT=$HOME/blosc

export ILMBASE_ROOT=$BOB_WORLD_SLOT_ilmbase
export OPENEXR_ROOT=$BOB_WORLD_SLOT_openexr
#export BOOST_ROOT=$BOB_WORLD_SLOT_boost
export TBB_ROOT=$BOB_WORLD_SLOT_tbb
export BLOSC_ROOT=$BOB_WORLD_SLOT_blosc
export LLVM_ROOT=$BOB_WORLD_SLOT_llvm
export CPPUNIT_ROOT=$BOB_WORLD_SLOT_cppunit
export GLFW3_ROOT=$BOB_WORLD_SLOT_glfw
export OPENVDB_ROOT=$BOB_WORLD_SLOT_openvdb
export OPENVDB_AX_ROOT=$BOB_WORLD_SLOT_openvdb_ax
export OPENVDB_ROOT="/hosts/bulwell/user_data/RND/dev/git/rndfx/3rdparty-openvdb/install"

if [ ! "$CORE" = "yes" ]; then
    export OPENVDB_ROOT=${PARMS[--prefix]}
    CMAKE_DICT["OPENVDB_BUILD_CORE"]="OFF"
else
    CMAKE_DICT["OPENVDB_BUILD_CORE"]="ON"
fi

CMAKE_DICT["CMAKE_CXX_COMPILER"]=${PARMS[--compiler]}
CMAKE_DICT["CMAKE_INSTALL_PREFIX"]=${PARMS[--prefix]}
CMAKE_DICT["CMAKE_BUILD_TYPE"]=${PARMS[--build_type]}
CMAKE_DICT["OPENVDB_ABI_VERSION_NUMBER"]=${PARMS[--abi]}

CMAKE_DICT["OPENVDB_BUILD_MAYA_PLUGIN"]="OFF"
CMAKE_DICT["OPENVDB_BUILD_DOCS"]="ON"
CMAKE_DICT["OPENVDB_BUILD_UNITTESTS"]="ON"
CMAKE_DICT["OPENVDB_ENABLE_RPATH"]="ON"
CMAKE_DICT["OPENVDB_CXX_STRICT"]="ON"

# If building with Houdini dependencies, turn off the python
# module as the CMake doesn't current support this build set

if [ "$HOUDINI" = "none" ]; then
    CMAKE_DICT["OPENVDB_BUILD_HOUDINI_SOPS"]="OFF"
    CMAKE_DICT["OPENVDB_BUILD_PYTHON_MODULE"]="ON"
    CMAKE_DICT["OPENVDB_PYTHON_WRAP_ALL_GRID_TYPES"]="ON"
else
    # Source houdini env
    cd ${PARMS[--houdini_dir]}
    source houdini_setup
    cd -
    CMAKE_DICT["OPENVDB_BUILD_HOUDINI_SOPS"]="ON"
    CMAKE_DICT["OPENVDB_BUILD_PYTHON_MODULE"]="OFF"
    CMAKE_DICT["OPENVDB_PYTHON_WRAP_ALL_GRID_TYPES"]="OFF"
fi

CMAKE_DICT["USE_GLFW3"]="ON"
CMAKE_DICT["GLFW3_USE_STATIC_LIBS"]="ON"
CMAKE_DICT["MINIMUM_BOOST_VERSION"]="1.55"
CMAKE_DICT["ILMBASE_NAMESPACE_VERSIONING"]="OFF"
CMAKE_DICT["OPENEXR_NAMESPACE_VERSIONING"]="OFF"
CMAKE_DICT["BOOST_PYTHON_NAMESPACE_VERSIONING"]="OFF"
CMAKE_DICT["GLFW3_NAMESPACE_VERSIONING"]="ON" # libglfw3-dev installs glfw (no version)
CMAKE_DICT["USE_SYSTEM_LIBRARY_PATHS"]="ON"

# Blosc support

if [ "$USE_BLOSC" = "yes" ]; then
    CMAKE_DICT["USE_BLOSC"]="ON"
else
    CMAKE_DICT["USE_BLOSC"]="OFF"
fi

# Format arguments for command line

CMAKE_COMMAND_STRING=""
for i in "${!CMAKE_DICT[@]}"; do
    CMAKE_COMMAND_STRING+="-D $i=${CMAKE_DICT[$i]} ";
done

rm -rf .build
mkdir -p .build
cd .build

# Run cmake

echo -e "CMake Version Details\n"
cmake --version

echo -e "Running Command:\ncmake $CMAKE_COMMAND_STRING ../\n"
cmake $CMAKE_COMMAND_STRING ../

# Build any targets

if HAS_PARM --targets; then

    # zero ccache stats
    ccache -z

    TARGETS=${PARMS[--targets]}
    TARGETS=${TARGETS//,/ }

    MAKE_COMMAND_STRING=""
    MAKE_COMMAND_STRING+="$TARGETS "
    MAKE_COMMAND_STRING+="-j${PARMS[-j]} "

    if HAS_PARM --verbose; then
        MAKE_COMMAND_STRING+="VERBOSE=1 "
    fi

    echo -e "Running Command:\nmake $MAKE_COMMAND_STRING\n"
    make $MAKE_COMMAND_STRING
    make install $MAKE_COMMAND_STRING

    # output ccache stats
    ccache -s
fi

cd -
