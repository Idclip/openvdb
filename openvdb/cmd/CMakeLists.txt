# Copyright (c) 2012-2019 DreamWorks Animation LLC
#
# All rights reserved. This software is distributed under the
# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
#
# Redistributions of source code must retain the above copyright
# and license notice and the following restrictions and disclaimer.
#
# *     Neither the name of DreamWorks Animation nor the names of
# its contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
#
PROJECT ( OpenVDBBinaries )
CMAKE_MINIMUM_REQUIRED ( VERSION 3.1 )

IF ( NOT OPENVDB_BUILD_CORE )
  FIND_PACKAGE ( OpenVDB REQUIRED )
  SET ( OPENVDB_LIB ${OpenVDB_OPENVDB_LIBRARY} )
  INCLUDE_DIRECTORIES ( ${OpenVDB_INCLUDE_DIR} )
ELSE ()
  SET ( OPENVDB_LIB openvdb_shared)
  INCLUDE_DIRECTORIES ( ../../ )
ENDIF ()

FIND_PACKAGE ( ILMBase REQUIRED )
FIND_PACKAGE ( OpenEXR REQUIRED )
FIND_PACKAGE ( OpenGL REQUIRED )
FIND_PACKAGE ( TBB REQUIRED )
FIND_PACKAGE ( ZLIB REQUIRED )

IF ( UNIX )
  FIND_PACKAGE ( Threads REQUIRED )
ENDIF ()

IF ( USE_BLOSC )
  FIND_PACKAGE ( Blosc REQUIRED )
ENDIF ()

IF ( APPLE )
  FIND_LIBRARY ( COCOA_LIBRARY Cocoa )
  FIND_LIBRARY ( IOKIT_LIBRARY IOKit )
  FIND_LIBRARY ( COREVIDEO_LIBRARY CoreVideo )
ENDIF ()

# @todo thread is only needed for vdb_view
FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} REQUIRED COMPONENTS iostreams system thread )
IF ( WIN32 AND OPENVDB_DISABLE_BOOST_IMPLICIT_LINKING )
  ADD_DEFINITIONS ( -DBOOST_ALL_NO_LIB )
ENDIF ()

# @todo GLFW, GLEW, glu, gl should only be dependent on vdb_view. Add
# CMake options to ignore these should vdb_view not be desired.
IF ( USE_GLFW3 )
  FIND_PACKAGE ( GLFW3 REQUIRED )
  SET ( OPENVDB_USE_GLFW_FLAG "-DOPENVDB_USE_GLFW_3" )
  IF ( UNIX AND NOT APPLE )
    SET ( GLFW_DEPENDENT_LIBRARIES "X11;Xi;Xrandr;Xinerama;Xcursor;Xxf86vm" )
  ENDIF ( UNIX AND NOT APPLE )
  SET ( GLFW_LINK_LIBRARY ${GLFW3_glfw_LIBRARY} )
  SET ( GLFW_INCLUDE_DIRECTORY ${GLFW3_INCLUDE_DIR} CACHE STRING "GLFW3 include directory")
ELSE ()
  FIND_PACKAGE ( GLFW REQUIRED )
  IF ( UNIX AND NOT APPLE )
    SET ( GLFW_DEPENDENT_LIBRARIES "X11;Xi;Xrandr;Xinerama;Xcursor;Xxf86vm" )
  ENDIF ()
  SET ( GLFW_LINK_LIBRARY ${GLFW_glfw_LIBRARY} )
  SET ( GLFW_INCLUDE_DIRECTORY ${GLFW_INCLUDE_DIR} CACHE STRING "GLFW include directory")
ENDIF ()

IF ( WIN32 )
  FIND_PACKAGE ( GLEW REQUIRED )
ENDIF ()

INCLUDE_DIRECTORIES ( SYSTEM ${ILMBASE_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES ( SYSTEM ${OPENEXR_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES ( SYSTEM ${Boost_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( SYSTEM ${TBB_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( SYSTEM ${PYTHON_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( SYSTEM ${GLFW_INCLUDE_DIRECTORY} )
INCLUDE_DIRECTORIES ( SYSTEM ${ZLIB_INCLUDE_DIR} )

IF ( USE_BLOSC )
  INCLUDE_DIRECTORIES ( SYSTEM ${BLOSC_INCLUDE_DIR} )
ENDIF ()

IF ( WIN32 )
  INCLUDE_DIRECTORIES ( SYSTEM ${GLEW_INCLUDE_DIR} )
ENDIF ()

IF ( WIN32 )
  # Because of implicit linking!
  LINK_DIRECTORIES ( ${Boost_LIBRARY_DIR} )
ENDIF ()

IF ( WIN32 )
  ADD_DEFINITIONS ( -D_WIN32 -DNOMINMAX -DHALF_EXPORTS -DOPENVDB_DLL )
ELSE ()
  ADD_DEFINITIONS ( -pthread -fPIC )
ENDIF ()

# @todo improve the viewer header system

FILE ( GLOB VIEWER_SOURCE_FILES ../viewer/*.h )
FILE ( MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
FILE ( COPY ${VIEWER_SOURCE_FILES} DESTINATION ${CMAKE_BINARY_DIR}/dwa/openvdb_viewer )
INCLUDE_DIRECTORIES ( ${CMAKE_BINARY_DIR}/dwa )

##### VDB binaries

SET ( OPENVDB_BINARIES_DEPENDANT_LIBS
  ${OPENVDB_LIB}
  ${Boost_IOSTREAMS_LIBRARY}
  ${Boost_SYSTEM_LIBRARY}
  ${Tbb_TBB_LIBRARY}
  ${Ilmbase_HALF_LIBRARY}
  ${ZLIB_LIBRARY}
  ${CMAKE_THREAD_LIBS_INIT}
  m
  stdc++
)

# vdb_print

SET ( VDB_PRINT_SOURCE_FILES openvdb_print/main.cc )
ADD_EXECUTABLE ( vdb_print ${VDB_PRINT_SOURCE_FILES} )
TARGET_LINK_LIBRARIES ( vdb_print
  ${OPENVDB_BINARIES_DEPENDANT_LIBS}
  )

# vdb_render

SET ( VDB_RENDER_SOURCE_FILES openvdb_render/main.cc )
ADD_EXECUTABLE ( vdb_render ${VDB_RENDER_SOURCE_FILES} )
TARGET_LINK_LIBRARIES ( vdb_render
  ${OPENVDB_BINARIES_DEPENDANT_LIBS}
  ${Openexr_ILMIMF_LIBRARY}
  ${Ilmbase_ILMTHREAD_LIBRARY}
  ${Ilmbase_IEX_LIBRARY}
  )

# vdb_view

SET ( VDB_VIEW_SOURCE_FILES
  openvdb_view/main.cc
  ../viewer/Camera.cc
  ../viewer/ClipBox.cc
  ../viewer/Font.cc
  ../viewer/RenderModules.cc
  ../viewer/Viewer.cc
  )

SET_SOURCE_FILES_PROPERTIES ( ${VDB_VIEW_SOURCE_FILES}
  PROPERTIES
  COMPILE_FLAGS "${OPENVDB_USE_GLFW_FLAG} -DGL_GLEXT_PROTOTYPES=1"
  )

IF ( NOT WIN32 )
  ADD_EXECUTABLE ( vdb_view ${VDB_VIEW_SOURCE_FILES} )
  TARGET_INCLUDE_DIRECTORIES ( vdb_view SYSTEM PRIVATE ${Boost_INCLUDE_DIR} )
  TARGET_LINK_LIBRARIES ( vdb_view
    ${OPENVDB_BINARIES_DEPENDANT_LIBS}
    ${Boost_THREAD_LIBRARY}
    ${OPENGL_gl_LIBRARY}
    ${OPENGL_glu_LIBRARY}
    ${COCOA_LIBRARY}
    ${IOKIT_LIBRARY}
    ${COREVIDEO_LIBRARY}
    ${GLFW_LINK_LIBRARY}
    ${GLFW_DEPENDENT_LIBRARIES}
    ${GLEW_GLEW_LIBRARY}
    dl
    )
ELSE ()
  # @todo vdb_view on windows
  MESSAGE ( WARNING "Currently no CMake support for building vdb_view binary on Windows." )
ENDIF ()

# Installation

IF ( NOT WIN32 )
  INSTALL ( TARGETS
    vdb_view
    DESTINATION
    bin
    )
ENDIF ()

INSTALL ( TARGETS
  vdb_print
  vdb_render
  DESTINATION
  bin
  )
