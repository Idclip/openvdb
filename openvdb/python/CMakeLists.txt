
PROJECT ( PyOpenVDB )

FIND_PACKAGE ( PythonInterp REQUIRED )
FIND_PACKAGE ( PythonLibs REQUIRED )

IF ( BOOST_PYTHON_NAMESPACE_VERSIONING )
    FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} COMPONENTS python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR} REQUIRED )
ELSE ()
    FIND_PACKAGE ( Boost ${MINIMUM_BOOST_VERSION} COMPONENTS python REQUIRED )
ENDIF ()

IF ( NOT OPENVDB_BUILD_CORE )

  FIND_PACKAGE ( OpenVDB REQUIRED )
  FIND_PACKAGE ( ILMBase REQUIRED )
  FIND_PACKAGE ( OpenEXR REQUIRED )
  FIND_PACKAGE ( TBB REQUIRED )
  FIND_PACKAGE ( ZLIB REQUIRED )

  IF ( OPENVDB_USE_BLOSC )
    FIND_PACKAGE ( Blosc REQUIRED )
  ENDIF ()

  # Set the variables that are otherwise defined in the core module.
  SET ( OPENVDB_MAJOR_VERSION_NUMBER ${OpenVDB_MAJOR_VERSION} )
  SET ( OPENVDB_MINOR_VERSION_NUMBER ${OpenVDB_MINOR_VERSION} )
  SET ( OPENVDB_PATCH_VERSION_NUMBER ${OpenVDB_PATCH_VERSION} )

  # Use the library installed
  SET ( OPENVDB_LIB ${OpenVDB_OPENVDB_LIBRARY} )

ELSE ()
  # Use the target
  SET ( OPENVDB_LIB openvdb_shared)
ENDIF ( NOT OPENVDB_BUILD_CORE )

SET ( OPENVDB_PYTHON_DEPENDANT_LIBS
  ${OPENVDB_LIB}
  ${Boost_PYTHON_LIBRARY}
  ${Boost_IOSTREAMS_LIBRARY}
  ${Boost_SYSTEM_LIBRARY}
  ${PYTHON_LIBRARY}
  ${Ilmbase_HALF_LIBRARY}
  ${Tbb_TBB_LIBRARY}
  ${ZLIB_LIBRARY}
)

INCLUDE_DIRECTORIES ( SYSTEM ${ILMBASE_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES ( SYSTEM ${OPENEXR_INCLUDE_DIRS} )
INCLUDE_DIRECTORIES ( SYSTEM ${Boost_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( SYSTEM ${TBB_INCLUDE_DIR} )
INCLUDE_DIRECTORIES ( SYSTEM ${PYTHON_INCLUDE_DIR} )

# MESSAGE ( "PYTHON_VERSION_STRING = ${PYTHON_VERSION_STRING}" )
# MESSAGE ( "PYTHON_VERSION_MAJOR = ${PYTHON_VERSION_MAJOR}" )
# MESSAGE ( "PYTHON_VERSION_MINOR = ${PYTHON_VERSION_MINOR}" )

SET ( OPENVDB_PYTHON_MODULE_SOURCE_FILES
  pyFloatGrid.cc
  pyIntGrid.cc
  pyMetadata.cc
  pyPointGrid.cc
  pyOpenVDBModule.cc
  pyPointGrid.cc
  pyTransform.cc
  pyVec3Grid.cc
  )

IF ( NOT DEFINED PYOPENVDB_INSTALL_DIRECTORY )
  SET ( PYOPENVDB_INSTALL_DIRECTORY
    lib/python${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}
    CACHE STRING "The directory to install the pyopenvdb.so module."
    )
ENDIF ( NOT DEFINED PYOPENVDB_INSTALL_DIRECTORY )

# RPath handling
IF ( OPENVDB_ENABLE_RPATH )

  SET( CMAKE_BUILD_WITH_INSTALL_RPATH TRUE )

  IF ( OpenVDB_LIBRARY_DIR )
    SET( CMAKE_INSTALL_RPATH ${OpenVDB_LIBRARY_DIR} )
  ELSE ()
    MESSAGE ( WARNING "Assumes the openvdb shared library is one level up"
      "If this is wrong set OpenVDB_LIBRARY_DIR to correct path")
    SET(CMAKE_INSTALL_RPATH "$ORIGIN/..")
  ENDIF ()

ENDIF ( OPENVDB_ENABLE_RPATH )

ADD_LIBRARY ( pyopenvdb SHARED
  ${OPENVDB_PYTHON_MODULE_SOURCE_FILES}
  )

IF ( OPENVDB_PYTHON_WRAP_ALL_GRID_TYPES )
  TARGET_COMPILE_DEFINITIONS ( pyopenvdb PRIVATE "-DPY_OPENVDB_WRAP_ALL_GRID_TYPES" )
ENDIF ()

TARGET_LINK_LIBRARIES ( pyopenvdb
  ${OPENVDB_PYTHON_DEPENDANT_LIBS}
  )

SET_TARGET_PROPERTIES ( pyopenvdb PROPERTIES
  PREFIX ""
  )

ADD_TEST ( pytest ${PYTHON_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/test/TestOpenVDB.py )
SET_TESTS_PROPERTIES ( pytest PROPERTIES ENVIRONMENT "PYTHONPATH=${CMAKE_CURRENT_BINARY_DIR}")

INSTALL ( TARGETS
  pyopenvdb
  DESTINATION
  ${PYOPENVDB_INSTALL_DIRECTORY}
  )

SET ( PYTHON_PUBLIC_INCLUDE_NAMES
  pyopenvdb.h
  )

INSTALL (FILES ${PYTHON_PUBLIC_INCLUDE_NAMES} DESTINATION include/openvdb/python )

