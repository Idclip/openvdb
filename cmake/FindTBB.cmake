# Copyright (c) 2012-2019 DreamWorks Animation LLC
#
# All rights reserved. This software is distributed under the
# Mozilla Public License 2.0 ( http://www.mozilla.org/MPL/2.0/ )
#
# Redistributions of source code must retain the above copyright
# and license notice and the following restrictions and disclaimer.
#
# *     Neither the name of DreamWorks Animation nor the names of
# its contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# IN NO EVENT SHALL THE COPYRIGHT HOLDERS' AND CONTRIBUTORS' AGGREGATE
# LIABILITY FOR ALL CLAIMS REGARDLESS OF THEIR BASIS EXCEED US$250.00.
#

#-*-cmake-*-
# - Find TBB
#
# Author : Nicholas Yue yue.nicholas@gmail.com
#
# This auxiliary CMake file helps in find the TBB headers and libraries
#
# TBB_FOUND                  set if TBB is found.
# Tbb_INCLUDE_DIR            TBB's include directory
# Tbb_LIBRARY_DIR            TBB's lib directory
# Tbb_TBB_LIBRARY            TBB libraries
# Tbb_TBB_PREVIEW_LIBRARY    TBB preview libraries (Mulitple Rendering Context)
# Tbb_TBBMALLOC_LIBRARY      TBB malloc libraries (Mulitple Rendering Context)

FIND_PACKAGE ( PackageHandleStandardArgs )

FIND_PATH ( TBB_LOCATION include/tbb/tbb.h
  NO_DEFAULT_PATH
  PATHS $ENV{TBB_ROOT} ${SYSTEM_LIBRARY_PATHS}
  )

FIND_PACKAGE_HANDLE_STANDARD_ARGS ( TBB
  REQUIRED_VARS TBB_LOCATION
  )

IF ( TBB_FOUND )

  SET ( TBB_BASE_LIB_DIRECTORIES
    ${TBB_LOCATION}
    ${SYSTEM_LIBRARY_PATHS}
  )

  SET ( TBB_PATH_SUFFIXES
    lib64
    lib
  )

  IF (APPLE)

    IF (TBB_FOR_CLANG)
        SET ( TBB_BASE_LIB_DIRECTORIES
          ${TBB_LOCATION}/lib/libc++
          ${TBB_BASE_LIB_DIRECTORIES}
        )
    ENDIF ()

    SET ( CMAKE_FIND_LIBRARY_SUFFIXES ".dylib")

    FIND_LIBRARY ( TBB_LIBRARY_PATH tbb
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
    )

    FIND_LIBRARY ( TBB_PREVIEW_LIBRARY_PATH tbb_preview
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
    )

    FIND_LIBRARY ( TBBMALLOC_LIBRARY_PATH tbbmalloc
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
    )

  ELSEIF (WIN32)

    IF (MSVC10)
      SET ( TBB_VC_DIR vc10 )
    ELSEIF (MSVC11)
      SET ( TBB_VC_DIR vc11 )
    ELSEIF (MSVC12)
      SET ( TBB_VC_DIR vc12 )
    ENDIF ( MSVC10)
    #  MESSAGE ( "TBB_VC_DIR = ${TBB_VC_DIR}" )

    SET ( TBB_PATH_SUFFIXES
      lib/intel64/${TBB_VC_DIR}
      ${TBB_PATH_SUFFIXES}
    )

    FIND_LIBRARY ( TBB_LIBRARY_PATH tbb
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES} )

    FIND_LIBRARY ( TBB_PREVIEW_LIBRARY_PATH tbb_preview
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES} )

    FIND_LIBRARY ( TBBMALLOC_LIBRARY_PATH tbbmalloc
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES} )

  ELSE (APPLE)
  # MESSAGE ( "CMAKE_COMPILER_IS_GNUCXX = ${CMAKE_COMPILER_IS_GNUCXX}")
    IF (${CMAKE_COMPILER_IS_GNUCXX})
      IF ( TBB_MATCH_COMPILER_VERSION )
        STRING(REGEX MATCHALL "[0-9]+" GCC_VERSION_COMPONENTS ${CMAKE_CXX_COMPILER_VERSION})
        LIST(GET GCC_VERSION_COMPONENTS 0 GCC_MAJOR)
        LIST(GET GCC_VERSION_COMPONENTS 1 GCC_MINOR)
        # MESSAGE(STATUS ${GCC_MAJOR})
        # MESSAGE(STATUS ${GCC_MINOR})
        # MESSAGE ( "TBB CMAKE_CXX_COMPILER_VERSION = ${CMAKE_CXX_COMPILER_VERSION}")
        SET ( TBB_PATH_SUFFIXES
          lib/intel64/gcc${GCC_MAJOR}.${GCC_MINOR}
          lib/x86_64-linux-gnu
          ${TBB_PATH_SUFFIXES}
        )
      ELSE ()
        SET ( TBB_PATH_SUFFIXES
          lib/intel64/gcc4.4
          lib/x86_64-linux-gnu
          ${TBB_PATH_SUFFIXES}
        )
      ENDIF ()
    ELSE ()
      MESSAGE ( FATAL_ERROR "Can't handle non-GCC compiler")
    ENDIF ()

    FIND_LIBRARY ( TBB_LIBRARY_PATH tbb
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
      NO_DEFAULT_PATH
      )

    FIND_LIBRARY ( TBB_PREVIEW_LIBRARY_PATH tbb_preview
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
      NO_DEFAULT_PATH
      )

    FIND_LIBRARY ( TBBMALLOC_LIBRARY_PATH tbbmalloc
      PATHS ${TBB_BASE_LIB_DIRECTORIES}
      PATH_SUFFIXES ${TBB_PATH_SUFFIXES}
      NO_DEFAULT_PATH
      )

  ENDIF (APPLE)

  GET_FILENAME_COMPONENT ( Tbb_LIBRARY_DIR ${TBB_LIBRARY_PATH} DIRECTORY CACHE )
  SET( Tbb_INCLUDE_DIR "${TBB_LOCATION}/include"
    CACHE STRING "TBB include directory")

  SET( Tbb_TBB_LIBRARY ${TBB_LIBRARY_PATH} CACHE STRING "tbb library")
  SET( Tbb_TBB_PREVIEW_LIBRARY ${TBB_PREVIEW_LIBRARY_PATH} CACHE STRING "tbb_preview library")
  SET( Tbb_TBBMALLOC_LIBRARY ${TBBMALLOC_LIBRARY_PATH} CACHE STRING "tbbmalloc library")

ENDIF ( TBB_FOUND )
